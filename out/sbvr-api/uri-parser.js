// Generated by CoffeeScript 1.12.6
(function() {
  var BadRequestError, OData2AbstractSQL, ODataParser, ParsingError, Promise, TranslationError, TypedError, _, memoize, memoizedOdata2AbstractSQL, metadataEndpoints, mustExtractHeader, notBadRequestOrParsingError, odata2AbstractSQL, odataParser, parseODataChangeset, splitApiRoot,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Promise = require('bluebird');

  TypedError = require('typed-error');

  ODataParser = require('@resin/odata-parser').ODataParser;

  OData2AbstractSQL = require('@resin/odata-to-abstract-sql').OData2AbstractSQL;

  memoize = require('memoizee');

  _ = require('lodash');

  exports.TranslationError = TranslationError = (function(superClass) {
    extend(TranslationError, superClass);

    function TranslationError() {
      return TranslationError.__super__.constructor.apply(this, arguments);
    }

    return TranslationError;

  })(TypedError);

  exports.ParsingError = ParsingError = (function(superClass) {
    extend(ParsingError, superClass);

    function ParsingError() {
      return ParsingError.__super__.constructor.apply(this, arguments);
    }

    return ParsingError;

  })(TypedError);

  exports.BadRequestError = BadRequestError = (function(superClass) {
    extend(BadRequestError, superClass);

    function BadRequestError() {
      return BadRequestError.__super__.constructor.apply(this, arguments);
    }

    return BadRequestError;

  })(TypedError);

  odataParser = ODataParser.createInstance();

  odata2AbstractSQL = {};

  exports.parseId = function(b) {
    return ODataParser.matchAll(String(b), 'ExternalKeyBind');
  };

  memoizedOdata2AbstractSQL = (function() {
    var _memoizedOdata2AbstractSQL;
    _memoizedOdata2AbstractSQL = memoize(function(vocabulary, odataQuery, method, bodyKeys) {
      var e;
      try {
        return odata2AbstractSQL[vocabulary].match(odataQuery, 'Process', [method, bodyKeys]);
      } catch (error) {
        e = error;
        console.error('Failed to translate url: ', JSON.stringify(odataQuery, null, '\t'), method, e, e.stack);
        throw new TranslationError('Failed to translate url');
      }
    }, {
      normalizer: JSON.stringify
    });
    return function(vocabulary, odataQuery, method, body) {
      var extraBodyVars, ref1, tree;
      ref1 = _memoizedOdata2AbstractSQL(vocabulary, odataQuery, method, _.keys(body).sort()), tree = ref1.tree, extraBodyVars = ref1.extraBodyVars;
      _.assign(body, extraBodyVars);
      return tree;
    };
  })();

  exports.metadataEndpoints = metadataEndpoints = ['$metadata', '$serviceroot'];

  notBadRequestOrParsingError = function(e) {
    return !((e instanceof BadRequestError) || (e instanceof ParsingError));
  };

  exports.parseOData = function(b) {
    return Promise["try"](function() {
      var apiRoot, env, odata, ref1, sortedCS, url;
      if (b._isChangeSet) {
        env = new Map();
        sortedCS = _.sortBy(b.changeSet, function(el) {
          return !(el.url[0] === '/');
        });
        return Promise.reduce(sortedCS, parseODataChangeset, env).then(function(env) {
          return Array.from(env.values());
        });
      } else {
        ref1 = splitApiRoot(b.url), url = ref1.url, apiRoot = ref1.apiRoot;
        odata = odataParser.matchAll(url, 'Process');
        return {
          method: b.method,
          vocabulary: apiRoot,
          resourceName: odata.tree.resource,
          odataBinds: odata.binds,
          odataQuery: odata.tree,
          values: b.data,
          custom: {},
          _defer: false
        };
      }
    })["catch"](SyntaxError, function(e) {
      throw new BadRequestError("Malformed url: '" + b.url + "'");
    })["catch"](notBadRequestOrParsingError, function(e) {
      console.error('Failed to parse url: ', b.method, b.url, e, e.stack);
      throw new ParsingError("Failed to parse url: '" + b.url + "'");
    });
  };

  parseODataChangeset = function(env, b) {
    var apiRoot, bind, contentId, defer, id, odata, parseResult, ref, ref1, ref2, tag, url;
    contentId = mustExtractHeader(b, 'content-id');
    if (env.has(contentId)) {
      throw new BadRequestError('Content-Id must be unique inside a changeset');
    }
    if (b.url[0] === '/') {
      ref1 = splitApiRoot(b.url), url = ref1.url, apiRoot = ref1.apiRoot;
      odata = odataParser.matchAll(url, 'Process');
      defer = false;
    } else {
      url = b.url;
      odata = odataParser.matchAll(url, 'Process');
      bind = odata.tree.resource.bind;
      ref2 = odata.binds[bind], tag = ref2[0], id = ref2[1];
      ref = env.get(id);
      if (_.isUndefined(ref)) {
        throw new BadRequestError('Content-Id refers to a non existent resource');
      }
      apiRoot = ref.vocabulary;
      odata.tree.resource = ref.resourceName;
      defer = true;
    }
    parseResult = {
      method: b.method,
      vocabulary: apiRoot,
      resourceName: odata.tree.resource,
      odataBinds: odata.binds,
      odataQuery: odata.tree,
      values: b.data,
      custom: {},
      id: contentId,
      _defer: defer
    };
    env.set(contentId, parseResult);
    return env;
  };

  splitApiRoot = function(url) {
    var apiRoot;
    url = url.split('/');
    apiRoot = url[1];
    if ((apiRoot == null) || (odata2AbstractSQL[apiRoot] == null)) {
      throw new ParsingError('No such api root: ' + apiRoot);
    }
    url = '/' + url.slice(2).join('/');
    return {
      url: url,
      apiRoot: apiRoot
    };
  };

  mustExtractHeader = function(body, header) {
    var h, ref1;
    h = (ref1 = body.headers[header]) != null ? ref1[0] : void 0;
    if (_.isUndefined(h)) {
      throw new BadRequestError(header + " must be specified");
    }
    return h;
  };

  exports.translateUri = function(arg) {
    var _defer, abstractSqlQuery, custom, id, isMetadataEndpoint, method, odataBinds, odataQuery, resourceName, values, vocabulary;
    method = arg.method, vocabulary = arg.vocabulary, resourceName = arg.resourceName, odataBinds = arg.odataBinds, odataQuery = arg.odataQuery, values = arg.values, custom = arg.custom, id = arg.id, _defer = arg._defer;
    isMetadataEndpoint = indexOf.call(metadataEndpoints, resourceName) >= 0 || method === 'OPTIONS';
    if (!isMetadataEndpoint) {
      abstractSqlQuery = memoizedOdata2AbstractSQL(vocabulary, odataQuery, method, values);
      return {
        method: method,
        vocabulary: vocabulary,
        resourceName: resourceName,
        odataBinds: odataBinds,
        odataQuery: odataQuery,
        abstractSqlQuery: abstractSqlQuery,
        values: values,
        custom: custom,
        id: id,
        _defer: _defer
      };
    }
    return {
      method: method,
      vocabulary: vocabulary,
      resourceName: resourceName,
      custom: custom
    };
  };

  exports.addClientModel = function(vocab, clientModel) {
    odata2AbstractSQL[vocab] = OData2AbstractSQL.createInstance();
    return odata2AbstractSQL[vocab].setClientModel(clientModel);
  };

  exports.deleteClientModel = function(vocab, clientModel) {
    return delete odata2AbstractSQL[vocab];
  };

}).call(this);

//# sourceMappingURL=uri-parser.js.map
