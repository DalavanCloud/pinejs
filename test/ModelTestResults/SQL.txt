[model,
     [term,
       person,
       person,
       [[Text,
           name,
           Name,
           []]],
       CREATE TABLE IF NOT EXISTS "person" ("id" INTEGER PRIMARY KEY,"name" TEXT),
       DROP TABLE "person";],
     [term,
       student,
       student,
       [[Text,
           name,
           Name,
           []]],
       CREATE TABLE IF NOT EXISTS "student" ("id" INTEGER PRIMARY KEY,"name" TEXT),
       DROP TABLE "student";],
     [term,
       lecturer,
       lecturer,
       [[Text,
           name,
           Name,
           []]],
       CREATE TABLE IF NOT EXISTS "lecturer" ("id" INTEGER PRIMARY KEY,"name" TEXT),
       DROP TABLE "lecturer";],
     [term,
       module,
       module,
       [[Text,
           name,
           Name,
           []]],
       CREATE TABLE IF NOT EXISTS "module" ("id" INTEGER PRIMARY KEY,"name" TEXT),
       DROP TABLE "module";],
     [fcTp,
       student-is_school_president,
       student is school president,
       [[ForeignKey,
           student_id,
           student,
           [student,
             id,
             name]]],
       CREATE TABLE IF NOT EXISTS "student-is_school_president" ("id" INTEGER PRIMARY KEY, "student_id" INTEGER, FOREIGN KEY ("student_id") REFERENCES "student"("id")),
       DROP TABLE "student-is_school_president";,
       [[term,
           student],
         [verb,
           is school president]]],
     [fcTp,
       student-is_registered_for-module,
       student is registered for module,
       [[ForeignKey,
           student_id,
           student,
           [student,
             id,
             name]],
         [ForeignKey,
           module_id,
           module,
           [module,
             id,
             name]]],
       CREATE TABLE IF NOT EXISTS "student-is_registered_for-module" ("id" INTEGER PRIMARY KEY, "student_id" INTEGER, "module_id" INTEGER, FOREIGN KEY ("student_id") REFERENCES "student"("id"), FOREIGN KEY ("module_id") REFERENCES "module"("id")),
       DROP TABLE "student-is_registered_for-module";,
       [[term,
           student],
         [verb,
           is registered for],
         [term,
           module]]],
     [fcTp,
       student-is_registered_for-module-to_catchup,
       student is registered for module to catchup module to catchup,
       [[ForeignKey,
           student_id,
           student,
           [student,
             id,
             name]],
         [ForeignKey,
           module_id,
           module,
           [module,
             id,
             name]]],
       CREATE TABLE IF NOT EXISTS "student-is_registered_for-module-to_catchup" ("id" INTEGER PRIMARY KEY, "student_id" INTEGER, "module_id" INTEGER, FOREIGN KEY ("student_id") REFERENCES "student"("id"), FOREIGN KEY ("module_id") REFERENCES "module"("id")),
       DROP TABLE "student-is_registered_for-module-to_catchup";,
       [[term,
           student],
         [verb,
           is registered for],
         [term,
           module],
         [verb,
           to catchup]]],
     [fcTp,
       student-is_registered_for-module-with-lecturer,
       student is registered for module with module with lecturer,
       [[ForeignKey,
           student_id,
           student,
           [student,
             id,
             name]],
         [ForeignKey,
           module_id,
           module,
           [module,
             id,
             name]],
         [ForeignKey,
           lecturer_id,
           lecturer,
           [lecturer,
             id,
             name]]],
       CREATE TABLE IF NOT EXISTS "student-is_registered_for-module-with-lecturer" ("id" INTEGER PRIMARY KEY, "student_id" INTEGER, "module_id" INTEGER, "lecturer_id" INTEGER, FOREIGN KEY ("student_id") REFERENCES "student"("id"), FOREIGN KEY ("module_id") REFERENCES "module"("id"), FOREIGN KEY ("lecturer_id") REFERENCES "lecturer"("id")),
       DROP TABLE "student-is_registered_for-module-with-lecturer";,
       [[term,
           student],
         [verb,
           is registered for],
         [term,
           module],
         [verb,
           with],
         [term,
           lecturer]]],
     [fcTp,
       person-is_swimming,
       person is swimming,
       [[ForeignKey,
           person_id,
           person,
           [person,
             id,
             name]]],
       CREATE TABLE IF NOT EXISTS "person-is_swimming" ("id" INTEGER PRIMARY KEY, "person_id" INTEGER, FOREIGN KEY ("person_id") REFERENCES "person"("id")),
       DROP TABLE "person-is_swimming";,
       [[term,
           person],
         [verb,
           is swimming]]],
     [rule,
       [],
        It is obligatory that	a student is school president,
       [],
       SELECT EXISTS(SELECT * FROM "student" AS "var1" WHERE EXISTS(SELECT * FROM "student-is_school_president" AS "f" WHERE "var1"."id" = "f"."student_id")) AS "result",
       []],
     [rule,
       [],
        It is necessary that		a student is school president,
       [],
       SELECT EXISTS(SELECT * FROM "student" AS "var1" WHERE EXISTS(SELECT * FROM "student-is_school_president" AS "f" WHERE "var1"."id" = "f"."student_id")) AS "result",
       []],
     [rule,
       [],
        It is possible that		a student is school president,
       [],
       SELECT EXISTS(SELECT * FROM "student" AS "var1" WHERE EXISTS(SELECT * FROM "student-is_school_president" AS "f" WHERE "var1"."id" = "f"."student_id")) AS "result",
       []],
     [rule,
       [],
        It is permissible that	a student is school president,
       [],
       SELECT EXISTS(SELECT * FROM "student" AS "var1" WHERE EXISTS(SELECT * FROM "student-is_school_president" AS "f" WHERE "var1"."id" = "f"."student_id")) AS "result",
       []],
     [rule,
       [],
        It is prohibited that	some students are school president,
       [],
       SELECT NOT EXISTS(SELECT * FROM "student" AS "var1" WHERE EXISTS(SELECT * FROM "student-is_school_president" AS "f" WHERE "var1"."id" = "f"."student_id")) AS "result",
       []],
     [rule,
       [],
        It is impossible that	some students are school president,
       [],
       SELECT NOT EXISTS(SELECT * FROM "student" AS "var1" WHERE EXISTS(SELECT * FROM "student-is_school_president" AS "f" WHERE "var1"."id" = "f"."student_id")) AS "result",
       []],
     [rule,
       [],
        It is not possible that	some students are school president,
       [],
       SELECT NOT EXISTS(SELECT * FROM "student" AS "var1" WHERE EXISTS(SELECT * FROM "student-is_school_president" AS "f" WHERE "var1"."id" = "f"."student_id")) AS "result",
       []],
     [rule,
       [],
        It is obligatory that each	student		is registered for at least one module,
       [],
       SELECT NOT EXISTS(SELECT * FROM "student" AS "var1" WHERE NOT EXISTS(SELECT * FROM "module" AS "var2" WHERE EXISTS(SELECT * FROM "student-is_registered_for-module" AS "f" WHERE "var1"."id" = "f"."student_id" AND "var2"."id" = "f"."module_id"))) AS "result",
       []],
     [rule,
       [],
        It is obligatory that a 		student		is registered for at least one module,
       [],
       SELECT EXISTS(SELECT * FROM "student" AS "var1" WHERE 1=1) AS "result",
       []],
     [rule,
       [],
        It is obligatory that an		student		is registered for at least one module,
       [],
       SELECT EXISTS(SELECT * FROM "student" AS "var1" WHERE 1=1) AS "result",
       []],
     [rule,
       [],
        It is obligatory that some	students	are registered for at least one module,
       [],
       SELECT EXISTS(SELECT * FROM "student" AS "var1" WHERE 1=1) AS "result",
       []],
     [rule,
       [],
        It is obligatory that at most 50		students are registered for at least one module,
       [],
       SELECT NOT EXISTS(SELECT count(*) AS "card" FROM "student" AS "var1"  JOIN "module" AS "var2" ON EXISTS(SELECT * FROM "student-is_registered_for-module" AS "f" WHERE "var1"."id" = "f"."student_id" AND "var2"."id" = "f"."module_id") WHERE 1=1 GROUP BY NULL HAVING "card">=51) AS "result",
       []],
     [rule,
       [],
        It is obligatory that at least one	student is registered for at least one module,
       [],
       SELECT EXISTS(SELECT * FROM "student" AS "var1" WHERE 1=1) AS "result",
       []],
     [rule,
       [],
        It is obligatory that more than 0	students are registered for at least one module,
       [],
       SELECT EXISTS(SELECT * FROM "student" AS "var1" WHERE 1=1) AS "result",
       []],
     [rule,
       [],
        It is obligatory that exactly one	student is school president,
       [],
       SELECT EXISTS(SELECT count(*) AS "card" FROM "student" AS "var1"  WHERE EXISTS(SELECT * FROM "student-is_school_president" AS "f" WHERE "var1"."id" = "f"."student_id") GROUP BY NULL HAVING "card"=1) AS "result",
       []],
     [rule,
       [],
        It is obligatory that at least one and at most 50	students are registered for at least one module,
       [],
       SELECT EXISTS(SELECT count(*) AS "card" FROM "student" AS "var1"  JOIN "module" AS "var2" ON EXISTS(SELECT * FROM "student-is_registered_for-module" AS "f" WHERE "var1"."id" = "f"."student_id" AND "var2"."id" = "f"."module_id") WHERE 1=1 GROUP BY NULL HAVING "card">=1 AND "card"<=50) AS "result",
       []],
     [rule,
       [],
        It is obligatory that exactly 0 people are swimming,
       [],
       SELECT EXISTS(SELECT count(*) AS "card" FROM "person" AS "var1"  WHERE EXISTS(SELECT * FROM "person-is_swimming" AS "f" WHERE "var1"."id" = "f"."person_id") GROUP BY NULL HAVING "card"=0) AS "result",
       []]]