define(['underscore', 'ometa-core'], function(_) {

	ometa SBVRLibs {}

	SBVRLibs.nativePrimitives = {
		'Serial': true,
		'Integer': true,
		'Short Text': true,
		'Long Text': true,
		'Real': true,
		'Date': true,
		'Date Time': true,
		'Time': true,
		'Interval': true,
		'Hashed': true,
		'JSON': true
	};
	
	SBVRLibs.initialize = function() {
		this.factTypes = {};
		this.conceptTypes = {};
	};
	
	SBVRLibs.ApplyFirstExisting = function(rules, ruleArgs) {
		if(ruleArgs == null) {
			ruleArgs = [];
		}
		ruleArgs.unshift('');
		for (var i = 0; i < rules.length; i++) {
			if(this[rules[i]] != undefined) {
				if(ruleArgs != null && ruleArgs.length > 0) {
					ruleArgs[0] = rules[i];
					return this._applyWithArgs.apply(this, ruleArgs);
				}
				return this._apply(rules[i], ruleArgs);
			}
		}
	};

	SBVRLibs.IsPrimitive = function(termName) {
		// do {
			if (this.nativePrimitives.hasOwnProperty(termName)) {
				return termName;
			}
		// } while (this.conceptTypes.hasOwnProperty(termName) && (termName = this.conceptTypes[termName]));
		if (this.conceptTypes.hasOwnProperty(termName) && (termName = this.conceptTypes[termName])) {
			if (this.nativePrimitives.hasOwnProperty(termName)) {
				return termName;
			}
		}
		return false;
	};
	
	SBVRLibs.AddFactType = function(factType, realFactType) {
		var mappedFactType = [];
		for(var i = 0; i < realFactType.length; i++) {
			mappedFactType[i] = realFactType[i].slice(0, 2);
			for(var j = 0; j < factType.length; j++) {
				if(realFactType[i][1] == factType[j][1] // The term/name/verb matches
					&& realFactType[i].length == factType[j].length // And they have the same length
					&& (realFactType[i].length < 3 || realFactType[i][2][1] == factType[j][2][1])) { // And they have no instance number, or the instance number matches.
					mappedFactType[i][2] = j;
				}
			}
		}
		this._traverseFactType(factType, mappedFactType);
		if(factType.length == 3 && (factType[1][1] == 'has' || factType[1][1] == 'is of')) {
			mappedFactType = _.extend([], mappedFactType);
			mappedFactType[0] = mappedFactType[0].slice(0, 2).concat(2);
			mappedFactType[2] = mappedFactType[2].slice(0, 2).concat(0);
			if(factType[1][1] == 'has') {
				this._traverseFactType([factType[2], ['Verb', 'is of'], factType[0]], mappedFactType);
			}
			else if(factType[1][1] == 'is of') {
				this._traverseFactType([factType[2], ['Verb', 'has'], factType[0]], mappedFactType);
			}
		}
	};

	SBVRLibs._traverseFactType = function(factType, create) {
		var self = this,
			traverseRecurse = function(currentFactTypePart, remainingFactType, currentLevel) {
			if(currentFactTypePart == null) {
				if(create) {
					currentLevel.__valid = create;
				}
				return currentLevel;
			}
			var finalLevel, finalLevels = {};
			currentFactTypePart = currentFactTypePart.slice(0, 2); // Make sure we only use the first 2 parts for the key.
			
			if(currentLevel.hasOwnProperty(currentFactTypePart) || (create && (currentLevel[currentFactTypePart] = {})) ) {
				finalLevel = traverseRecurse(remainingFactType[0], remainingFactType.slice(1), currentLevel[currentFactTypePart]);
				if(finalLevel != false) {
					_.extend(finalLevels, finalLevel);
				}
			}
			
			if(!create && (currentFactTypePart[0] == 'Term' || currentFactTypePart[0] == 'Name')) {
				while( self.conceptTypes.hasOwnProperty(currentFactTypePart[1]) ) {
					currentFactTypePart = ['Term', self.conceptTypes[currentFactTypePart[1]]];
					if( currentLevel.hasOwnProperty(currentFactTypePart) ) {
						// We use recursion so here we go down each branch until we find the suitable one, or run out of branches.
						finalLevel = traverseRecurse(remainingFactType[0], remainingFactType.slice(1), currentLevel[currentFactTypePart]);
						if(finalLevel !== false) {
							_.extend(finalLevels, finalLevel);
						}
					}
				}
			}
			return _.isEmpty(finalLevels) === true ? false : finalLevels;
		};
		return traverseRecurse(factType[0], factType.slice(1), this.factTypes);
	};

	SBVRLibs.MappedFactType = function(factType) {
		var traverseInfo = this._traverseFactType(factType);
		if(traverseInfo===false || !traverseInfo.hasOwnProperty('__valid')) {
			return false;
		}
		return traverseInfo.__valid;
	};

	SBVRLibs.ActualFactType = function(factType) {
		var mappedFactType = this.MappedFactType(factType);
		if(mappedFactType === false) {
			return false;
		}
		var actualFactType = [];
		for(var i = 0; i < mappedFactType.length; i++) {
			actualFactType[i] = mappedFactType[i].slice(0, 2);
		}
		return actualFactType;
	};
	
	SBVRLibs.IsChild = function(child, parent) {
		// Parent should be in the form ['Term', ...], where we care about the ... bit.
		parent = parent[1];
		do {
			if( child == parent ) {
				return true;
			}
		} while( this.conceptTypes.hasOwnProperty(child) && (child = this.conceptTypes[child]) );
		return false;
	};

	SBVRLibs.FactTypeRootTerms = function(factType) {
		var mappedFactType = this.MappedFactType(factType);
		if(mappedFactType === false) {
			return false;
		}
		var schemaInfo = [],
			schemaInfoIndex = 0,
			usedTermNames = {};
		for(var i=0; i < factType.length; i+=2) {
			for(var j=0; j < mappedFactType.length; j+=2) {
				if(mappedFactType[j][2] == i) {
					schemaInfo[schemaInfoIndex++] = {
						term: mappedFactType[j][1],
						field: mappedFactType[j][1]
					};
					if(usedTermNames.hasOwnProperty(mappedFactType[j][1])) {
						usedTermNames[mappedFactType[j][1]] = 0;
					}
					else {
						usedTermNames[mappedFactType[j][1]] = null;
					}
				}
			}
		}
		for(var i=0; i < schemaInfo.length; i++) {
			if(usedTermNames[schemaInfo[i].term] != null) {
				schemaInfo[i].field = schemaInfo[i].field + (++usedTermNames[schemaInfo[i].term]);
			}
		}
		return schemaInfo;
	};
	
	SBVRLibs.GetResourceName = function(termOrFactType) {
		var i = 0, resource = [];
		if(_.isString(termOrFactType)) {
			return termOrFactType.replace(new RegExp(' ', 'g'), '_');
		}
		else {
			for(;i < termOrFactType.length; i++) {
				resource.push(termOrFactType[i][1].replace(new RegExp(' ', 'g'), '_'));
			}
			return resource.join('-');
		}
	};
	
	SBVRLibs.GetTable = function(termOrFactType) {
		return this.tables[this.GetResourceName(termOrFactType)];
	};
	
	SBVRLibs.GetTableField = function(table, fieldName) {
		var fieldID = this.GetTableFieldID(table, fieldName);
		if(fieldID === false) {
			return false;
		}
		return table.fields[fieldID];
	};
	
	SBVRLibs.GetTableFieldID = function(table, fieldName) {
		var tableFields = table.fields;
		for(var i = 0; i < tableFields.length; i++) {
			if(tableFields[i][1] == fieldName) {
				return i;
			}
		}
		return false;
	};
	
	// ometaifyObject = function(variable) {
		// if(_.isArray(variable)) {
			// for(var i=0;i<variable.length;i++) {
				// variable[i] = ometaifyObject(variable[i]);
			// }
			// return variable;
		// }
		// if (typeof variable === 'object') {
			// var ometaArray = [];
			// for(var key in variable) {
				// if(variable.hasOwnProperty(key)) {
					// ometaArray.push([key, ometaifyObject(variable[key])]);
				// }
			// }
			// return ometaArray;
		// }
		// return variable;
	// }
	
	return SBVRLibs;
});	
