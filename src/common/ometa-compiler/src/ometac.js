// Generated by CoffeeScript 1.3.3
(function() {
  var calculateLineColInfo, compileOmeta, compileOmetaFile, doCompile, filePath, fs, js_beautify, knownOpts, load, nopt, ometajs, parsed, parsingError, shortHands, translationError, vm, _i, _len, _ref;

  fs = require('fs');

  vm = require('vm');

  load = function(filePath) {
    return vm.runInThisContext(fs.readFileSync(filePath, 'utf8'), __filename);
  };

  ometajs = require('../../../external/ometa-js/lib/ometajs.js');

  js_beautify = require('js-beautify').js_beautify;

  calculateLineColInfo = function(string, index) {
    var char, column, line, _i, _len, _ref;
    line = 1;
    column = 0;
    _ref = string.slice(0, index + 1 || 9e9);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      char = _ref[_i];
      column++;
      if (char === '\n') {
        line++;
        column = 0;
      }
    }
    return {
      line: line,
      column: column
    };
    console.log('Line:', line);
    return console.log('Col:', column);
  };

  translationError = function(m, i) {
    console.log('Translation error - please report this!');
    throw fail;
  };

  parsingError = function(ometa) {
    return function(m, i) {
      var column, line, start, _ref;
      _ref = calculateLineColInfo(ometa, i), line = _ref.line, column = _ref.column;
      start = Math.max(0, i - 20);
      console.log('Error on line ' + line + ', column ' + column);
      console.log('Error around: ' + ometa.substring(start, Math.min(ometa.length, start + 40)));
      console.log('Error around: ' + ometa.substring(i - 2, Math.min(ometa.length, i + 2)));
      throw m;
    };
  };

  compileOmeta = function(ometa, pretty, desc) {
    var js, tree;
    if (desc == null) {
      desc = 'OMeta';
    }
    try {
      console.log('Parsing: ' + desc);
      tree = ometajs.BSOMetaJSParser.matchAll(ometa, 'topLevel', void 0, parsingError(ometa));
      console.log('Compiling: ' + desc);
      js = ometajs.BSOMetaJSTranslator.match(tree, 'trans', void 0, translationError);
      if (pretty === true) {
        console.log('Beautifying: ' + desc);
        js = js_beautify(js);
      }
      return js;
    } catch (e) {
      return false;
    }
  };

  compileOmetaFile = function(ometaFilePath, jsFilePath, pretty) {
    console.log('Reading: ' + ometaFilePath);
    return fs.readFile(ometaFilePath, 'utf8', (function(ometaFilePath) {
      return function(err, data) {
        var js, ometa;
        if (err) {
          return console.log(err);
        } else {
          ometa = data.replace(/\r\n/g, '\n');
          js = compileOmeta(ometa, pretty, ometaFilePath);
          if (js !== false) {
            console.log('Writing: ' + ometaFilePath);
            return fs.writeFile(jsFilePath, js, function() {
              return console.log('Finished: ' + ometaFilePath);
            });
          }
        }
      };
    })(ometaFilePath));
  };

  if (process.argv[1] === __filename) {
    nopt = require('nopt');
    knownOpts = {
      'pretty': Boolean,
      'watch': Boolean
    };
    shortHands = {
      '-p': ['--pretty'],
      '-w': ['--watch']
    };
    parsed = nopt(knownOpts, shortHands, process.argv, 2);
    doCompile = function(filePath) {
      return compileOmetaFile(filePath, filePath.substring(0, filePath.lastIndexOf('.')) + '.js', parsed.pretty);
    };
    _ref = parsed.argv.remain;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      filePath = _ref[_i];
      doCompile(filePath);
      if (parsed.watch) {
        (function(filePath) {
          return fs.watch(filePath).on('change', function(event, filename) {
            return doCompile(filePath);
          });
        })(filePath);
      }
    }
  }

  if (typeof exports !== "undefined" && exports !== null) {
    exports.compileOmetaFile = compileOmetaFile;
  }

  if (typeof exports !== "undefined" && exports !== null) {
    exports.compileOmeta = compileOmeta;
  }

}).call(this);
