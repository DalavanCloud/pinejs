define(['ometa!sbvr-parser/SBVRLibs', 'ometa-core'], function(SBVRLibs) {
	// TODO: Make the LFValidator validate that it is actually correctly structured LF.
	ometa LFValidator <: SBVRLibs {
		trans
			[:t apply(t):a]
			-> a,
		token :x =
			[:t ?{t==x} apply(x):a]
			-> a,

		letters =
			letter+:l space*
			-> l.join(''),

		Number
			number:n ?{!isNaN(n)}
			-> ['Number', parseInt(n, 10)],

		Model
			{[]}:xs
			(
				(	"Term"
				|	"Name"
				|	"FactType"
				|	"Rule"
				):x
				(	?(x != null)
					{xs.push(x)}
				)?
			)*
			-> ['Model'].concat(xs),

		FactType
			{[]}:factType
			(	(	"Term"
				|	"Name"
				):identifier
				"Verb":verb
				{factType.concat([identifier, verb])}:factType
			)*
			(	(	"Term"
				|	"Name"
				):identifier
				{factType.push(identifier)}
			)?
			&(:attrs AddFactType(factType, factType))?
			addAttributes(['FactType'].concat(factType)),

		Term
			:t
			(	(	// Variable number
					"Number":n
				|	// Or embedded data
					"Integer"
				|	"Text"
				):x
				-> ['Term', t, x]
			|	addAttributes(['Term', t])
			),
		Name
			:name
			addAttributes(['Name', name]),
		Verb
			:v
			-> ['Verb', v],
		Rule
			(	"ObligationFormulation"
			|	"NecessityFormulation"
			|	"PossibilityFormulation"
			|	"PermissibilityFormulation"
			):x
			"StructuredEnglish":t
			-> ['Rule', x, t],
		addAttributes :termOrVerb =
			(	end
			|	{{}}:attrsFound
				{['Attributes']}:attrs
				[	'Attributes'
					[	:attrName
						ApplyFirstExisting(['Attr' + attrName, 'DefaultAttr'], [termOrVerb]):attrVal
						(	?(attrVal != null)
							{attrsFound[attrName] = attrVal}
							{attrs.push([attrName, attrVal])}
						)?
					]*
					end
				]
				defaultAttributes(termOrVerb, attrsFound, attrs)
			)
			-> termOrVerb,
		DefaultAttr :tableID =
			anything,
		AttrConceptType :termName =
			['Term' :conceptType {this.conceptTypes[termName[1]] = conceptType}],
		AttrDefinition :termOrVerb =
			(	['Enum' :values]
			|	trans
			),
		AttrSynonymousForm :factType =
			:synForm
			AddFactType(synForm, factType.slice(1))
			-> synForm,

		StructuredEnglish
			:a
			-> ['StructuredEnglish', a],
		
		ObligationFormulation
			trans*:xs
			-> ['ObligationFormulation'].concat(xs),
		NecessityFormulation
			trans*:xs
			-> ['NecessityFormulation'].concat(xs),
		PossibilityFormulation
			trans*:xs
			-> ['PossibilityFormulation'].concat(xs),
		PermissibilityFormulation
			trans*:xs
			-> ['PermissibilityFormulation'].concat(xs),

		LogicalNegation
			trans:xs
			-> ['LogicalNegation'].concat([xs]),

		quant =
			(	"UniversalQuantification"
			|	"ExistentialQuantification"
			|	"ExactQuantification"
			|	"AtMostNQuantification"
			|	"AtLeastNQuantification"
			|	"NumericalRangeQuantification"
			),
		UniversalQuantification
			"Variable":v trans*:xs
			-> ['UniversalQuantification', v].concat(xs),
		ExistentialQuantification
			"Variable":v trans*:xs
			-> ['ExistentialQuantification', v].concat(xs),
		ExactQuantification
			"Cardinality":i
			"Variable":v trans*:xs
			-> ['ExactQuantification', i, v].concat(xs),
		AtMostNQuantification
			"MaximumCardinality":a
			"Variable":v trans*:xs
			-> ['AtMostNQuantification', a, v].concat(xs),
		AtLeastNQuantification
			"MinimumCardinality":i
			"Variable":v trans*:xs
			-> ['AtLeastNQuantification', i, v].concat(xs),
		NumericalRangeQuantification
			"MinimumCardinality":i "MaximumCardinality":a
			"Variable":v trans*:xs
			-> ['NumericalRangeQuantification', i, a, v].concat(xs),

		Cardinality
			"Number":n
			-> ['Cardinality', n],
		MinimumCardinality
			"Number":n
			-> ['MinimumCardinality', n],
		MaximumCardinality
			"Number":n
			-> ['MaximumCardinality', n],

		Variable
			"Number":num
			"Term":term
			(	"AtomicFormulation"
			|	quant
			)*:w
			-> ['Variable', num, term].concat(w),

		Integer
			number:num
			?{!isNaN(num)}
			-> ['Integer', num],

		Text
			anything:text
			-> ['Text', text],

		RoleBinding
			(	"Term"
			|	"Name"
			):identifier
			(	number
			|	"Integer"
			|	"Text"
			):bindIdentifier
			-> ['RoleBinding', identifier, bindIdentifier], 
		AtomicFormulation
			"FactType":f
			"RoleBinding"*:b
			-> ['AtomicFormulation', f].concat(b)
	}
	
	LFValidator.initialize = function() {
		SBVRLibs.initialize.call(this);
	};

	LFValidator.defaultAttributes = function(termOrVerb, attrsFound, attrs) {
		termOrVerb.push(attrs);
	};
	
	return LFValidator;
});
