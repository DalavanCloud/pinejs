define(['ometa!server-glue/uri-parser', 'lodash'], function(URIParser, _) {
	ometa ServerURIParser <: URIParser)  {
		ProcessURI :body =
			(	?(!_.isArray(body))
				{[{}]}:body
			)?
			'/'?
			{[]}:resources
			{0}:i
			{	for(;i<body.length;i++) {
					this.currentBody = body[i];
					if(i<body.length-1) {
						this._lookahead(function() {
							resources.push(this._apply('Resource'));
						});
					}
					else {
						resources.push(this._apply('Resource'));
					}
				}
			}
			-> resources,

		Vocabulary =
			<	(	~'/'
					anything
				)+
			>,

		ResourcePart =
			<	(	letter
				|	' '
				|	'_'
				)+
			>:resourcePart
			-> resourcePart.replace(new RegExp('_', 'g'), ' '),

		ResourceName =
			<	ResourcePart
				(	'-'
					ResourcePart
				)*
			>,

		Resource =
			{this.newBody = {}}
			ResourceName:resourceName
			(	(	?(this.currentMethod != 'GET')
				|	&'?'
				)
				{['Query']}:query
				AddQueryResource(query, resourceName)
				Modifiers(query)
				'*'?
			)?
			-> {resourceName: resourceName, query: query, values: this.newBody},

		Comparator =
				':'
				-> 'Equals'
			|	seq('!:')
				-> 'NotEquals'
			|	'>'
				(	':'
					-> 'GreaterThanOrEqual'
				|	-> 'GreaterThan'
				)
			|	'<'
				(	':'
					-> 'LessThanOrEqual'
				|	-> 'LessThan'
				)
			|	'~'
				-> 'Like',

		Modifiers :query =
			'?'
			(	'&'?
				(	Filters(query)
				|	Sorts:sorts
					{query.push(sorts)}
				|	Limit:limit
					{query.push(limit)}
				|	Offset:offset
					{query.push(offset)}
				)
			)*,

		Field =
			(	ResourcePart:resourceName '.' ResourcePart:resourceFieldName
			|	{this.currentResource}:resourceName
				ResourcePart:resourceFieldName
			)
			GetMapping(resourceName, resourceFieldName):mapping
			-> ['ReferencedField'].concat(mapping),

		Filters :query =
			seq('filter=')
			(	Field:field
				Comparator:comparator
				<	(	~ValueBreak
						anything
					)+
				>:value
				';'?
				{field[1]}:resourceName
				{field[2]}:resourceFieldName
				GetMapping(resourceName,resourceFieldName):mapping
				AddWhereClause(query, [comparator, field, ['Bind', mapping[0], this.GetTableField(mapping)]])
				AddBodyVar(query, resourceName, resourceFieldName, mapping, value)
			)+,

		Number = <digit+>:d -> ['Number', parseInt(d, 10)],

		Limit =
			seq('limit=')
			Number:num
			->	['Limit', num],

		Offset =
			seq('offset=')
			Number:num
			->	['Offset', num],

		Sorts =
			seq('order=')
			(	Field:field
				':'
				(	seq('ASC')
				|	seq('DESC')
				):direction
				';'?
				-> [direction, field]
			)+:sorts
			->	['OrderBy'].concat(sorts),

		ValueBreak =
			(	';'
			|	'*'
			|	'/'
			)
	}
	
	ServerURIParser.type = 'Custom';

	return ServerURIParser;
});
