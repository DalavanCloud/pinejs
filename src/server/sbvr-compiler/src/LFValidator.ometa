define(['ometa/ometa-base'], function() {
	var LFValidator;
	
	// TODO: Make the LFValidator validate that it is actually correctly structured LF.
	ometa LFValidator {
		$ :x =
			(	token(x):a
				-> [a] 
			|	-> []
			),

		trans
			[:t apply(t):a]
			-> a,
		token :x =
			[:t ?{t==x} apply(x):a]
			-> a,

		letters =
			letter+:l space*
			-> l.join(''),

		num
			number:n ?{!isNaN(n)}
			-> ['num', parseInt(n)],

		model
			("term"|"fcTp"|"rule")*:xs
			-> ['model'].concat(xs),

		fcTp
			{a=[]}("term":t "verb":v {a=a.concat([t,v])})* $('term'):e
			addAttributes(['fcTp'].concat(a).concat(e)),

		term
			:t addAttributes(['term', t]),
		verb
			:v
			-> ['verb', v],
		rule
			("obl"|"nec"|"pos"|"prm"):x "text":t
			-> ['rule', x, t],
		addAttributes :termOrVerb =
			(	end
			|	{[]}:attrs {{}}:attrsFound
				[	end
				|
					(
						[	:attrName {attrsFound[attrName] = true}
							(	?(this['attr'+attrName]) apply('attr'+attrName):attrVal
							|	:attrVal
							)
						]
						-> [attrName, attrVal]
					)*:attrs
				]
				defaultAttributes(termOrVerb, attrsFound, attrs)
			)
			-> termOrVerb,
		attrDefinition =
			(	['Enum' :values]
			|	trans
			),

		text		:a											-> ['text', a],
		
		obl
			trans*:xs
			-> ['obl'].concat(xs),
		nec
			trans*:xs
			-> ['nec'].concat(xs),
		pos
			trans*:xs
			-> ['pos'].concat(xs),
		prm
			trans*:xs
			-> ['prm'].concat(xs),

		neg
			trans:xs
			-> ['neg'].concat([xs]),

		quant =
			(	"univQ"
			|	"existQ"
			|	"exactQ"
			|	"atMostQ"
			|	"atLeastQ"
			|	"numRngQ"
			),
		univQ
			"var":v trans*:xs
			-> ['univQ', v].concat(xs),
		existQ
			"var":v trans*:xs
			-> ['existQ', v].concat(xs),
		exactQ
			"card":i
			"var":v trans*:xs
			-> ['exactQ', i, v].concat(xs),
		atMostQ
			"maxCard":a
			"var":v trans*:xs
			-> ['atMostQ', a, v].concat(xs),
		atLeastQ
			"minCard":i
			"var":v trans*:xs
			-> ['atLeastQ', i, v].concat(xs),
		numRngQ
			"minCard":i "maxCard":a
			"var":v trans*:xs
			-> ['numRngQ', i, a, v].concat(xs),

		card
			"num":n
			-> ['card', n],
		minCard
			"num":n
			-> ['minCard', n],
		maxCard
			"num":n
			-> ['maxCard', n],

		var
			"num":n "term":t ("aFrm"|quant):w
			-> ['var', n, t, w],
		var
			"num":n "term":t
			-> ['var', n, t],

		bind
			"term":t number:n
			-> ['bind', t, n], 
		aFrm
			"fcTp":f "bind"*:b
			-> ['aFrm', f].concat(b)
	}

	LFValidator.defaultAttributes = function(termOrVerb, attrsFound, attrs) {
		termOrVerb.push(attrs);
	}
	
	return LFValidator;
});