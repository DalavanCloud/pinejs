define(['sbvr-parser/SBVRLibs', 'ometa-core'], function(SBVRLibs) {
	// TODO: Make the LFValidator validate that it is actually correctly structured LF.
	ometa LFValidator <: SBVRLibs {
		$ :x =
			(	token(x):a
				-> [a] 
			|	-> []
			),

		trans
			[:t apply(t):a]
			-> a,
		token :x =
			[:t ?{t==x} apply(x):a]
			-> a,

		letters =
			letter+:l space*
			-> l.join(''),

		Number
			number:n ?{!isNaN(n)}
			-> ['Number', parseInt(n)],

		Model
			{[]}:xs
			(
				(	"Term"
				|	"FactType"
				|	"Rule"
				):x
				(	?(x != null)
					{xs.push(x)}
				)?
			)*
			-> ['Model'].concat(xs),

		FactType
			{[]}:factType
			(	"Term":t
				"Verb":v
				{factType.concat([t,v])}:factType
			)*
			$('Term'):t
			{factType.concat(t)}:factType
			&(:attrs AddFactType(factType, factType))?
			addAttributes(['FactType'].concat(factType)),

		Term
			:t addAttributes(['Term', t]),
		Verb
			:v
			-> ['Verb', v],
		Rule
			("ObligationF"|"NecessityF"|"PossibilityF"|"PermissibilityF"):x "StructuredEnglish":t
			-> ['Rule', x, t],
		addAttributes :termOrVerb =
			(	end
			|	{{}}:attrsFound
				[	(
						[	:attrName
							ApplyFirstExisting(['Attr' + attrName, 'DefaultAttr'], [termOrVerb]):attrVal
							{attrsFound[attrName] = attrVal}
						]
						-> [attrName, attrVal]
					)*:attrs
					end
				]
				defaultAttributes(termOrVerb, attrsFound, attrs)
			)
			-> termOrVerb,
		DefaultAttr :tableID =
			anything,
		AttrConceptType :termName =
			['Term' :conceptType {this.conceptTypes[termName[1]] = conceptType}],
		AttrDefinition :termOrVerb =
			(	['Enum' :values]
			|	trans
			),
		AttrSynonymousForm :factType =
			:synForm
			AddFactType(synForm.slice(0, -1), factType.slice(1))
			-> synForm,

		StructuredEnglish
			:a
			-> ['StructuredEnglish', a],
		
		ObligationF
			trans*:xs
			-> ['ObligationF'].concat(xs),
		NecessityF
			trans*:xs
			-> ['NecessityF'].concat(xs),
		PossibilityF
			trans*:xs
			-> ['PossibilityF'].concat(xs),
		PermissibilityF
			trans*:xs
			-> ['PermissibilityF'].concat(xs),

		LogicalNegation
			trans:xs
			-> ['LogicalNegation'].concat([xs]),

		quant =
			(	"UniversalQ"
			|	"ExistentialQ"
			|	"ExactQ"
			|	"AtMostNQ"
			|	"AtLeastNQ"
			|	"NumericalRangeQ"
			),
		UniversalQ
			"Variable":v trans*:xs
			-> ['UniversalQ', v].concat(xs),
		ExistentialQ
			"Variable":v trans*:xs
			-> ['ExistentialQ', v].concat(xs),
		ExactQ
			"Cardinality":i
			"Variable":v trans*:xs
			-> ['ExactQ', i, v].concat(xs),
		AtMostNQ
			"MaximumCardinality":a
			"Variable":v trans*:xs
			-> ['AtMostNQ', a, v].concat(xs),
		AtLeastNQ
			"MinimumCardinality":i
			"Variable":v trans*:xs
			-> ['AtLeastNQ', i, v].concat(xs),
		NumericalRangeQ
			"MinimumCardinality":i "MaximumCardinality":a
			"Variable":v trans*:xs
			-> ['NumericalRangeQ', i, a, v].concat(xs),

		Cardinality
			"Number":n
			-> ['Cardinality', n],
		MinimumCardinality
			"Number":n
			-> ['MinimumCardinality', n],
		MaximumCardinality
			"Number":n
			-> ['MaximumCardinality', n],

		Variable
			"Number":num
			"Term":term
			(	"AtomicFormulation"
			|	quant
			)*:w
			-> ['Variable', num, term].concat(w),

		RoleBinding
			"Term":t number:n
			-> ['RoleBinding', t, n], 
		AtomicFormulation
			"FactType":f "RoleBinding"*:b
			-> ['AtomicFormulation', f].concat(b)
	}
	
	LFValidator.initialize = function() {
		SBVRLibs.initialize.call(this);
	};

	LFValidator.defaultAttributes = function(termOrVerb, attrsFound, attrs) {
		termOrVerb.push(attrs);
	};
	
	return LFValidator;
});