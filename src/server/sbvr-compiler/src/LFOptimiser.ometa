define(['sbvr-compiler/LFValidator'], function(LFValidator) {
	var LFOptimiser;

	ometa LFOptimiser <: LFValidator {
		Helped =
			?(this.helped === true)
			{this.helped = false},
		
		SetHelped =
			{this.helped = true},

		Process =
			:x
			trans(x):x
			(Helped('disableMemoisation') trans(x):x)*
			-> x,

		atLeastQ
				"minCard":i ?{i[1][1]==1} "Variable":v trans*:xs
				SetHelped
				-> ['existQ', v].concat(xs)
			|	^atLeastQ,

		numRngQ
				"minCard":i
				"maxCard":j
				?{i[1][1]==j[1][1]}
				"Variable":v trans*:xs
				SetHelped
				-> ['exactQ', ['card', i[1]], v].concat(xs)
			|	^numRngQ,

		LogicalNegation =
				['LogicalNegation' trans:xs] SetHelped
				-> xs
			|	^LogicalNegation
	}

	LFOptimiser.initialize = function() {
		LFValidator.initialize.call(this);
		this._didSomething = false;
	}
	
	return LFOptimiser;
});