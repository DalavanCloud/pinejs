// Generated by CoffeeScript 1.3.3

/*
To generate a hashed password we can use this line:
password = bcrypt.encrypt_sync(password, bcrypt.gen_salt_sync())

CREATE TABLE users (
	username VARCHAR(50) NOT NULL PRIMARY KEY,
	password CHAR(60) NOT NULL
);
*/


(function() {

  define(function() {
    return function(options, sbvrUtils, app, passport) {
      var LocalStrategy, checkPassword, compare, exports;
      exports = {};
      checkPassword = function(username, password, done) {
        return sbvrUtils.runURI('GET', '/user/user?filter=user.username:' + username, [{}], null, function(data) {
          var hash;
          console.log(data.instances);
          hash = data.instances[0].password;
          return compare(password, hash, function(err, res) {
            if (res) {
              return done(null, username);
            } else {
              return done(null, false);
            }
          });
        }, function(errors) {
          return done(null, false);
        });
      };
      if (passport != null) {
        compare = require('bcrypt').compare;
        LocalStrategy = require('passport-local').Strategy;
        app.post(options.loginUrl, passport.authenticate('local', {
          failureRedirect: options.failureRedirect
        }), function(req, res, next) {
          return res.redirect(options.successRedirect);
        });
        passport.serializeUser(function(user, done) {
          return done(null, user);
        });
        passport.deserializeUser(function(user, done) {
          return done(null, user);
        });
        passport.use(new LocalStrategy(checkPassword));
        exports.isAuthed = function(req, res, next) {
          if (req.isAuthenticated()) {
            return next();
          } else {
            return res.redirect(options.failureRedirect);
          }
        };
      } else {
        compare = function(value, hash, callback) {
          return callback(null, value === hash);
        };
        (function() {
          var _user;
          _user = false;
          app.post(options.loginUrl, function(req, res, next) {
            return checkPassword(req.body.username, req.body.password, function(errors, user) {
              _user = user;
              if (res === false) {
                return res.redirect(options.failureRedirect);
              } else {
                return res.redirect(options.successRedirect);
              }
            });
          });
          return exports.isAuthed = function(req, res, next) {
            console.log('wooo, checking auth');
            if (_user !== false) {
              return next();
            } else {
              return res.redirect(options.failureRedirect);
            }
          };
        })();
      }
      return exports;
    };
  });

}).call(this);
