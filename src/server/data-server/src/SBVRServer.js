// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty;

  define(['sbvr-compiler/AbstractSQLRules2SQL', 'sbvr-compiler/AbstractSQL2CLF', 'data-server/ServerURIParser', 'underscore', 'utils/createAsyncQueueCallback'], function(AbstractSQLRules2SQL, AbstractSQL2CLF, ServerURIParser, _, createAsyncQueueCallback) {
    var db, exports, isServerOnAir, serverIsOnAir, uiModel;
    exports = {};
    db = null;
    uiModel = 'Term:      Short Text\nTerm:      Long Text\nTerm:      text\n	Concept type: Long Text\nTerm:      name\n	Concept type: Short Text\nTerm:      textarea\n	Database id Field: name\n	Database Value Field: text\nFact type: textarea is disabled\nFact type: textarea has name\nFact type: textarea has text\nRule:      It is obligatory that each textarea has exactly 1 name\nRule:      It is obligatory that each name is of exactly 1 textarea\nRule:      It is obligatory that each textarea has exactly 1 text';
    isServerOnAir = (function() {
      var onAir, pendingCallbacks;
      onAir = null;
      pendingCallbacks = [];
      return function(funcOrVal) {
        var callback, _i, _len;
        if (funcOrVal === true || funcOrVal === false) {
          isServerOnAir = function(funcOrVal) {
            if (funcOrVal === true || funcOrVal === false) {
              return onAir = funcOrVal;
            } else {
              return funcOrVal(onAir);
            }
          };
          for (_i = 0, _len = pendingCallbacks.length; _i < _len; _i++) {
            callback = pendingCallbacks[_i];
            callback(onAir);
          }
          return pendingCallbacks = null;
        } else {
          return pendingCallbacks.push(funcOrVal);
        }
      };
    })();
    serverIsOnAir = function(req, res, next) {
      return isServerOnAir(function(onAir) {
        if (onAir) {
          return next();
        } else {
          return next('route');
        }
      });
    };
    exports.setup = function(app, requirejs, sbvrUtils, databaseOptions) {
      requirejs(['database-layer/db'], function(dbModule) {
        db = dbModule.connect(databaseOptions);
        return db.transaction(function(tx) {
          sbvrUtils.executeStandardModels(tx);
          sbvrUtils.executeModel(tx, 'ui', uiModel, function() {
            return console.log('Sucessfully executed ui model.');
          }, function(tx, error) {
            return console.log('Failed to execute ui model.', error);
          });
          return sbvrUtils.runURI('GET', '/dev/model?filter=model_type:sql;vocabulary:data', null, tx, function(result) {
            return isServerOnAir(true);
          }, function() {
            return isServerOnAir(false);
          });
        });
      });
      app.get('/onair', function(req, res, next) {
        return isServerOnAir(function(onAir) {
          return res.json(onAir);
        });
      });
      app.post('/update', serverIsOnAir, function(req, res, next) {
        return res.send(404);
      });
      app.post('/execute', function(req, res, next) {
        return sbvrUtils.runURI('GET', '/ui/textarea?filter=name:model_area', null, null, function(result) {
          var seModel;
          seModel = result.instances[0].text;
          return db.transaction(function(tx) {
            tx.begin();
            return sbvrUtils.executeModel(tx, 'data', seModel, function(tx, lfModel, slfModel, abstractSqlModel, sqlModel, clientModel) {
              sbvrUtils.runURI('PUT', '/ui/textarea-is_disabled?filter=textarea.name:model_area/', [
                {
                  value: true
                }
              ], tx);
              isServerOnAir(true);
              return res.send(200);
            }, function(tx, errors) {
              return res.json(errors, 404);
            });
          });
        }, function() {
          return res.send(404);
        });
      });
      app.del('/cleardb', function(req, res, next) {
        return db.transaction(function(tx) {
          return tx.tableList(function(tx, result) {
            var i, _i, _ref;
            for (i = _i = 0, _ref = result.rows.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
              tx.dropTable(result.rows.item(i).name);
            }
            sbvrUtils.executeStandardModels(tx);
            sbvrUtils.executeModel(tx, 'ui', uiModel, function() {
              return console.log('Sucessfully executed ui model.');
            }, function(tx, error) {
              return console.log('Failed to execute ui model.', error);
            });
            return res.send(200);
          });
        });
      });
      app.put('/importdb', function(req, res, next) {
        var asyncCallback, queries;
        queries = req.body.split(";");
        asyncCallback = createAsyncQueueCallback(function() {
          return res.send(200);
        }, function() {
          return res.send(404);
        });
        return db.transaction(function(tx) {
          var query, _i, _len;
          for (_i = 0, _len = queries.length; _i < _len; _i++) {
            query = queries[_i];
            if (query.trim().length > 0) {
              (function(query) {
                asyncCallback.addWork();
                return tx.executeSql(query, [], asyncCallback.successCallback, function(tx, error) {
                  console.log(query);
                  console.log(error);
                  return asyncCallback.errorCallback;
                });
              })(query);
            }
          }
          return asyncCallback.endAdding();
        });
      });
      app.get('/exportdb', function(req, res, next) {
        var env;
        if (typeof process !== "undefined" && process !== null) {
          env = process.env;
          env['PGPASSWORD'] = '.';
          req = require;
          return req('child_process').exec('pg_dump --clean -U postgres -h localhost -p 5432', {
            env: env
          }, function(error, stdout, stderr) {
            console.log(stdout, stderr);
            return res.json(stdout);
          });
        } else {
          return db.transaction(function(tx) {
            return tx.tableList(function(tx, result) {
              var asyncCallback, exported, i, tbn, _fn, _i, _ref;
              exported = '';
              asyncCallback = createAsyncQueueCallback(function() {
                return res.json(exported);
              }, function() {
                return res.send(404);
              });
              asyncCallback.addWork(result.rows.length);
              _fn = function(tbn) {
                return db.transaction(function(tx) {
                  return tx.executeSql('SELECT * FROM "' + tbn + '";', [], function(tx, result) {
                    var currRow, insQuery, notFirst, propName, valQuery, _j, _ref1;
                    insQuery = "";
                    for (i = _j = 0, _ref1 = result.rows.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
                      currRow = result.rows.item(i);
                      notFirst = false;
                      insQuery += 'INSERT INTO "' + tbn + '" (';
                      valQuery = '';
                      for (propName in currRow) {
                        if (!__hasProp.call(currRow, propName)) continue;
                        if (notFirst) {
                          insQuery += ",";
                          valQuery += ",";
                        } else {
                          notFirst = true;
                        }
                        insQuery += '"' + propName + '"';
                        valQuery += "'" + currRow[propName] + "'";
                      }
                      insQuery += ") values (" + valQuery + ");\n";
                    }
                    exported += insQuery;
                    return asyncCallback.successCallback();
                  }, asyncCallback.errorCallback);
                });
              };
              for (i = _i = 0, _ref = result.rows.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
                tbn = result.rows.item(i).name;
                exported += 'DROP TABLE IF EXISTS "' + tbn + '";\n';
                exported += result.rows.item(i).sql + ";\n";
                _fn(tbn);
              }
              return asyncCallback.endAdding();
            }, null, "name NOT LIKE '%_buk'");
          });
        }
      });
      app.post('/backupdb', serverIsOnAir, function(req, res, next) {
        return db.transaction(function(tx) {
          return tx.tableList(function(tx, result) {
            var asyncCallback, i, tbn, _i, _ref, _results;
            asyncCallback = createAsyncQueueCallback(function() {
              return res.send(200);
            }, function() {
              return res.send(404);
            });
            asyncCallback.addWork(result.rows.length * 2);
            _results = [];
            for (i = _i = 0, _ref = result.rows.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
              tbn = result.rows.item(i).name;
              tx.dropTable(tbn + '_buk', true, asyncCallback.successCallback, asyncCallback.errorCallback);
              _results.push(tx.executeSql('ALTER TABLE "' + tbn + '" RENAME TO "' + tbn + '_buk";', asyncCallback.successCallback, asyncCallback.errorCallback));
            }
            return _results;
          }, function() {
            return res.send(404);
          }, "name NOT LIKE '%_buk'");
        });
      });
      app.post('/restoredb', serverIsOnAir, function(req, res, next) {
        return db.transaction(function(tx) {
          return tx.tableList(function(tx, result) {
            var asyncCallback, i, tbn, _i, _ref, _results;
            asyncCallback = createAsyncQueueCallback(function() {
              return res.send(200);
            }, function() {
              return res.send(404);
            });
            asyncCallback.addWork(result.rows.length * 2);
            _results = [];
            for (i = _i = 0, _ref = result.rows.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
              tbn = result.rows.item(i).name;
              tx.dropTable(tbn.slice(0, -4), true, asyncCallback.successCallback, asyncCallback.errorCallback);
              _results.push(tx.executeSql('ALTER TABLE "' + tbn + '" RENAME TO "' + tbn.slice(0, -4) + '";', asyncCallback.successCallback, asyncCallback.errorCallback));
            }
            return _results;
          }, function() {
            return res.send(404);
          }, "name LIKE '%_buk'");
        });
      });
      app.get('/ui/*', sbvrUtils.parseURITree, function(req, res, next) {
        return sbvrUtils.runGet(req, res);
      });
      app.get('/data/*', serverIsOnAir, sbvrUtils.parseURITree, function(req, res, next) {
        return sbvrUtils.runGet(req, res);
      });
      app.post('/data/*', serverIsOnAir, sbvrUtils.parseURITree, function(req, res, next) {
        return sbvrUtils.runPost(req, res);
      });
      app.put('/ui/*', sbvrUtils.parseURITree, function(req, res, next) {
        return sbvrUtils.runPut(req, res);
      });
      app.put('/data/*', serverIsOnAir, sbvrUtils.parseURITree, function(req, res, next) {
        return sbvrUtils.runPut(req, res);
      });
      app.del('/data/*', serverIsOnAir, sbvrUtils.parseURITree, function(req, res, next) {
        return sbvrUtils.runDelete(req, res);
      });
      return app.del('/', serverIsOnAir, function(req, res, next) {
        sbvrUtils.runURI('DELETE', '/ui/textarea-is_disabled?filter=textarea.name:model_area/');
        sbvrUtils.runURI('PUT', '/ui/textarea?filter=name:model_area/', [
          {
            text: ''
          }
        ]);
        sbvrUtils.deleteModel('data');
        isServerOnAir(false);
        return res.send(200);
      });
    };
    return exports;
  });

}).call(this);
